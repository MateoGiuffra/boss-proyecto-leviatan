[gd_scene load_steps=28 format=3 uid="uid://b5s2xjtsrnukx"]

[ext_resource type="Texture2D" uid="uid://b8y23l3txtasg" path="res://assets/player/walk/walk_00.png" id="2_3d7ta"]
[ext_resource type="Texture2D" uid="uid://t0ecywtwoeab" path="res://assets/player/idle/idle_2.png" id="2_bnhqw"]
[ext_resource type="Texture2D" uid="uid://chkf5h360n0c3" path="res://assets/player/idle/idle_3.png" id="3_753ju"]
[ext_resource type="Texture2D" uid="uid://bpec3id1vcjpa" path="res://assets/player/walk/walk_01.png" id="3_bnhqw"]
[ext_resource type="Texture2D" uid="uid://gpxeih1m8tca" path="res://assets/player/jump/jump_0.png" id="4_73mqe"]
[ext_resource type="Texture2D" uid="uid://g77uckby1gjd" path="res://assets/player/walk/walk_02.png" id="4_753ju"]
[ext_resource type="Texture2D" uid="uid://dnt0xgelw65w2" path="res://assets/player/idle/idle_4.png" id="4_mwgf3"]
[ext_resource type="Texture2D" uid="uid://bf5muolwjra5q" path="res://assets/player/walk/walk_03.png" id="5_mwgf3"]
[ext_resource type="Texture2D" uid="uid://bddlcd4jmo4w5" path="res://assets/player/walk/walk_04.png" id="6_obrgw"]
[ext_resource type="Texture2D" uid="uid://c0u0hd43ofhrk" path="res://assets/player/walk/walk_05.png" id="7_3a8uq"]
[ext_resource type="Texture2D" uid="uid://ckvtim08u6g61" path="res://assets/player/walk/walk_06.png" id="8_jis8g"]
[ext_resource type="Texture2D" uid="uid://d08pdr3s8dsvi" path="res://assets/player/walk/walk_07.png" id="9_73mqe"]
[ext_resource type="Texture2D" uid="uid://nchem3rjy05p" path="res://assets/player/walk/walk_08.png" id="10_4ohmj"]
[ext_resource type="Texture2D" uid="uid://cyohupgn5f1i7" path="res://assets/player/walk/walk_09.png" id="11_vf103"]
[ext_resource type="Texture2D" uid="uid://b2dabngvxsw0h" path="res://assets/player/walk/walk_10.png" id="12_2x24p"]
[ext_resource type="Texture2D" uid="uid://cotanv146878g" path="res://assets/player/walk/walk_11.png" id="13_f0kc4"]
[ext_resource type="Script" uid="uid://bnelajanpbmfr" path="res://entities/not-enemies/StateMachine.gd" id="17_753ju"]
[ext_resource type="Script" uid="uid://bn1uk83fgflr8" path="res://scripts/states/player/PlayerIdleState.gd" id="18_mwgf3"]
[ext_resource type="Script" uid="uid://b8jgpxj1ccsss" path="res://scripts/states/player/PlayerWalkState.gd" id="19_obrgw"]
[ext_resource type="Script" uid="uid://dfcjh1w7f8hl2" path="res://scripts/states/player/PlayerJumpState.gd" id="20_3a8uq"]
[ext_resource type="Script" uid="uid://b2lscshlwxjx5" path="res://scripts/states/player/PlayerDashState.gd" id="21_jis8g"]
[ext_resource type="PackedScene" uid="uid://c8ekq2vk56rn6" path="res://inventory/Inventory.tscn" id="22_73mqe"]

[sub_resource type="GDScript" id="GDScript_td2n2"]
script/source = "extends CharacterBody2D

# Parámetros que serán gestionados por el State Machine
@export var acceleration: float = 3750.0
@export var movement_speed_limit: float = 300.0
@export var friction_weight: float = 6.25
@export var dash_speed: float = 1200.0
@export var gravity: float = 725.0
@export var jump_speed: int = 450
@export var swim_boost: int = 3
@onready var animated_player: AnimatedSprite2D = $AnimatedPlayer
@onready var state_machine = $StateMachine

@onready var inventory: Inventory = $Inventory
@export var inventory_ui: InventoryUI

@onready var double_tap_timer: Timer = $Timers/DoubleTapTimer
@onready var dash_timer: Timer = $Timers/DashTimer


# Variables para la lógica del dash y swim boost (si no se mueven al State Machine)
var movement_direction: int
var count_swim_boost = swim_boost
var jump: bool
var is_dashing: bool
var waiting_second_tap: bool
var finish_colddown_dash: bool = true
var finish_colddown_swim_boost: bool = true


func _ready() -> void:
	# Inicialización de InventoryUI
	if inventory_ui == null:
		var ui_nodes: Array = get_tree().get_nodes_in_group(\"ui_layer\")
		if !ui_nodes.is_empty():
			inventory_ui = ui_nodes.get(0)
				
	if inventory_ui != null:
		inventory_ui.initialize(inventory)


func _on_item_detector_area_entered(area: Area2D):
	if area.has_method(\"get_item_data\"):
		var world_item_data: ItemData = area.get_item_data()
		print(\"¡Detectado! Item: \" + world_item_data.id)
		
		if inventory.pick_up_item(world_item_data):
			area.queue_free()
			print(\"Recogido: \", world_item_data.id)

func _physics_process(_delta: float) -> void:
	# La lógica de animación y movimiento debe ser gestionada por el State Machine,
	# pero dejo la parte de la gravedad/input aquí para que los estados la utilicen.
	
	get_input()
	
	# La animación ya no se gestiona aquí, sino en los PlayerState.gd
	# El State Machine se encarga del movimiento (move_and_slide())
	move_and_slide()
	
	
func get_input() -> void:
	movement_direction = int(Input.is_action_pressed(\"move_right\")) - int(Input.is_action_pressed(\"move_left\"))	
	jump = Input.is_action_just_pressed(\"jump\")
	_check_double_tap(Input.is_action_just_pressed(\"move_right\"))
	_check_double_tap(Input.is_action_just_pressed(\"move_left\"))
	flip_sprite(movement_direction)
	
func play_animation(animation_name: StringName)-> void:
	# Función expuesta para que los estados puedan controlar la animación
	if animated_player.sprite_frames.has_animation(animation_name):
		animated_player.play(animation_name)
	
func flip_sprite(direction: int) -> void:
	if direction != 0:
		animated_player.flip_h = direction < 0
		
# dash (Debería moverse al PlayerDashState, pero lo mantengo aquí por ahora)

func _check_double_tap(is_moving: bool) -> void:
	if is_moving && finish_colddown_dash:
		if waiting_second_tap:
			_start_dash()
			waiting_second_tap = false
			double_tap_timer.stop()
		else:
			waiting_second_tap = true
			double_tap_timer.start()

func _start_dash()-> void:
	dash_timer.start()
	is_dashing = true
	
func _finish_dash()-> void:
	is_dashing = false
	
func _on_dash_timer_timeout() -> void:
	_finish_dash()

func _finish_waiting_for_second_tap() -> void:
	waiting_second_tap = false
	
func _on_double_tap_timer_timeout() -> void:
	_finish_waiting_for_second_tap()

func _on_dash_cold_down_timeout() -> void:
	finish_colddown_dash = true


# moving player

func want_moving() -> bool:
	return movement_direction != 0
	
# Estas funciones de movimiento y detención son redundantes con el State Machine
# y generan conflictos, por lo que su uso debe ser delegado a los PlayerState.gd
func move_player(_delta: float):
	var current_movement_speed = velocity.x + (movement_direction * acceleration * _delta)
	velocity.x = clamp(current_movement_speed, -movement_speed_limit, movement_speed_limit)
	play_animation(\"walk\")

func stop_player(_delta: float):
	velocity.x = lerp(velocity.x, 0.0, friction_weight * _delta) if abs(velocity.x) > 1 else 0
	play_animation(\"idle\")

func can_use_swim_boost() -> bool:
	return count_swim_boost > 0 && jump && finish_colddown_swim_boost

func _on_swim_boost_cold_down_timeout() -> void:
	finish_colddown_swim_boost = true
"

[sub_resource type="Gradient" id="Gradient_bnhqw"]
interpolation_mode = 2
interpolation_color_space = 2
offsets = PackedFloat32Array(0, 0.8434066)
colors = PackedColorArray(1, 1, 1, 1, 0, 0, 0, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_7phyx"]
gradient = SubResource("Gradient_bnhqw")
width = 512
height = 512
use_hdr = true
fill = 1
fill_from = Vector2(0.5, 0.5)
fill_to = Vector2(0, 0.5)

[sub_resource type="SpriteFrames" id="SpriteFrames_cd5ud"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("2_bnhqw")
}, {
"duration": 1.0,
"texture": ExtResource("3_753ju")
}, {
"duration": 1.0,
"texture": ExtResource("4_mwgf3")
}],
"loop": true,
"name": &"idle",
"speed": 6.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("4_73mqe")
}],
"loop": true,
"name": &"jump",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("2_3d7ta")
}, {
"duration": 1.0,
"texture": ExtResource("3_bnhqw")
}, {
"duration": 1.0,
"texture": ExtResource("4_753ju")
}, {
"duration": 1.0,
"texture": ExtResource("5_mwgf3")
}, {
"duration": 1.0,
"texture": ExtResource("6_obrgw")
}, {
"duration": 1.0,
"texture": ExtResource("7_3a8uq")
}, {
"duration": 1.0,
"texture": ExtResource("8_jis8g")
}, {
"duration": 1.0,
"texture": ExtResource("9_73mqe")
}, {
"duration": 1.0,
"texture": ExtResource("10_4ohmj")
}, {
"duration": 1.0,
"texture": ExtResource("11_vf103")
}, {
"duration": 1.0,
"texture": ExtResource("12_2x24p")
}, {
"duration": 1.0,
"texture": ExtResource("13_f0kc4")
}],
"loop": true,
"name": &"walk",
"speed": 20.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_i87q2"]
radius = 26.0
height = 120.0

[node name="Player" type="CharacterBody2D"]
collision_mask = 3
script = SubResource("GDScript_td2n2")
acceleration = 300.0
movement_speed_limit = 100.0
dash_speed = 600.0
gravity = 100.0
jump_speed = 200
metadata/_edit_group_ = true

[node name="OutLight" type="PointLight2D" parent="."]
visible = false
position = Vector2(-0.5000286, -0.9999981)
scale = Vector2(1.5097657, 0.84375)
energy = 3.08
texture = SubResource("GradientTexture2D_7phyx")

[node name="PointLight2D" type="PointLight2D" parent="."]
texture_filter = 1
position = Vector2(5.000025, -20.500008)
scale = Vector2(3, 3)
color = Color(0.31272963, 0.52217776, 0.99998647, 1)
energy = 1.4
shadow_enabled = true
shadow_color = Color(0, 0, 0, 0.9254902)
shadow_filter = 1
shadow_filter_smooth = 2.0
texture = SubResource("GradientTexture2D_7phyx")

[node name="AnimatedPlayer" type="AnimatedSprite2D" parent="."]
texture_filter = 1
position = Vector2(2, -62)
scale = Vector2(4, 4)
sprite_frames = SubResource("SpriteFrames_cd5ud")
animation = &"jump"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
texture_filter = 1
position = Vector2(-2, -60)
shape = SubResource("CapsuleShape2D_i87q2")

[node name="Camera2D" type="Camera2D" parent="."]
scale = Vector2(1e-05, 1e-05)
zoom = Vector2(1.5, 1.5)
process_callback = 0
position_smoothing_enabled = true
rotation_smoothing_enabled = true

[node name="Timers" type="Node" parent="."]

[node name="DoubleTapTimer" type="Timer" parent="Timers"]
wait_time = 0.25
one_shot = true

[node name="DashTimer" type="Timer" parent="Timers"]
wait_time = 0.2

[node name="DashColdDown" type="Timer" parent="Timers"]

[node name="SwimBoostColdDown" type="Timer" parent="Timers"]
wait_time = 0.8
one_shot = true
ignore_time_scale = true

[node name="StateMachine" type="Node" parent="." node_paths=PackedStringArray("initial_state")]
script = ExtResource("17_753ju")
initial_state = NodePath("PlayerWalkState")

[node name="PlayerWalkState" type="Node" parent="StateMachine" node_paths=PackedStringArray("player")]
script = ExtResource("19_obrgw")
player = NodePath("../..")
metadata/_custom_type_script = "uid://b8jgpxj1ccsss"

[node name="PlayerIdleState" type="Node" parent="StateMachine"]
script = ExtResource("18_mwgf3")
metadata/_custom_type_script = "uid://bn1uk83fgflr8"

[node name="PlayerJumpState" type="Node" parent="StateMachine" node_paths=PackedStringArray("player")]
script = ExtResource("20_3a8uq")
player = NodePath("../..")
metadata/_custom_type_script = "uid://dfcjh1w7f8hl2"

[node name="PlayerDashState" type="Node" parent="StateMachine" node_paths=PackedStringArray("player")]
script = ExtResource("21_jis8g")
player = NodePath("../..")
metadata/_custom_type_script = "uid://b2lscshlwxjx5"

[node name="ItemDetector" type="Area2D" parent="."]
collision_mask = 2

[node name="CollisionShape2D2" type="CollisionShape2D" parent="ItemDetector"]
texture_filter = 1
position = Vector2(-2, -60)
shape = SubResource("CapsuleShape2D_i87q2")

[node name="Inventory" parent="." instance=ExtResource("22_73mqe")]

[connection signal="timeout" from="Timers/DoubleTapTimer" to="." method="_on_double_tap_timer_timeout"]
[connection signal="timeout" from="Timers/DashTimer" to="." method="_on_dash_timer_timeout"]
[connection signal="timeout" from="Timers/DashColdDown" to="." method="_on_dash_cold_down_timeout"]
[connection signal="timeout" from="Timers/SwimBoostColdDown" to="." method="_on_swim_boost_cold_down_timeout"]
[connection signal="area_entered" from="ItemDetector" to="." method="_on_item_detector_area_entered"]
[connection signal="body_entered" from="ItemDetector" to="." method="_on_item_detector_body_entered"]
[connection signal="body_exited" from="ItemDetector" to="." method="_on_item_detector_body_exited"]
